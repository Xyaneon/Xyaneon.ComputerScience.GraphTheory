<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xyaneon.ComputerScience.GraphTheory</name>
    </assembly>
    <members>
        <member name="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1">
            <summary>
            Represents an edge in a directed graph.
            </summary>
            <typeparam name="TVertex">
            The type of <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> stored in this edge.
            </typeparam>
            <seealso cref="!:UndirectedEdge"/>
            <seealso cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/> class
            using the provided vertices.
            </summary>
            <param name="source">
            The source vertex.
            </param>
            <param name="destination">
            The destination vertex.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            -or-
            <paramref name="destination"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1.Equals(Xyaneon.ComputerScience.GraphTheory.DirectedEdge{`0})">
            <summary>
            Indicates whether the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>
            is equal to another <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>.
            </summary>
            <param name="other">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/> to compare with this
            object.
            </param>
            <returns>
            <see langword="true"/> if the other
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/> is equal to this
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>; otherwise,
            <see langword="false"/>.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1.SourceVertex">
            <summary>
            Gets or sets the source vertex of this edge.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The supplied value is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1.DestinationVertex">
            <summary>
            Gets or sets the destination vertex of this edge.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The supplied value is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to
            this <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>.
            </summary>
            <param name="obj">
            The object to compare to the current
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified object is equal to
            this <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1.GetHashCode">
            <summary>
            Gets a hash code for this <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1.op_Equality(Xyaneon.ComputerScience.GraphTheory.DirectedEdge{`0},Xyaneon.ComputerScience.GraphTheory.DirectedEdge{`0})">
            <summary>
            Determines whether two <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>
            instances are equal to each other.
            </summary>
            <param name="edge1">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/> on the left hand of the
            expression.
            </param>
            <param name="edge2">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/> on the right hand of the
            expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="edge1"/> is equal to
            <paramref name="edge2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1.op_Inequality(Xyaneon.ComputerScience.GraphTheory.DirectedEdge{`0},Xyaneon.ComputerScience.GraphTheory.DirectedEdge{`0})">
            <summary>
            Determines whether two <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>
            instances are not equal to each other.
            </summary>
            <param name="edge1">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/> on the left hand of the
            expression.
            </param>
            <param name="edge2">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/> on the right hand of the
            expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="edge1"/> is not equal to
            <paramref name="edge2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2">
            <summary>
            Represents a directed graph.
            </summary>
            <typeparam name="TVertex">
            The type of vertices used in this graph. Must be either
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> or a derived class.
            </typeparam>
            <typeparam name="TEdge">
            The type of edges used in this graph. Must be either
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/> or a derived class.
            </typeparam>
            <seealso cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2"/>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2"/> class
            using the provided collections of edges and vertices.
            </summary>
            <param name="edges">
            The collection of edges in the graph.
            </param>
            <param name="vertices">
            The collection of vertices in the graph.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/>.
            -or-
            <paramref name="vertices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="edges"/> contains an edge
            which has a <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> which is not in <paramref name="vertices"/>.
            </exception>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.Edges">
            <summary>
            Gets the read-only collection of edges in this graph.
            </summary>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.IsCompleteGraph">
            <summary>
            Gets a value indicating whether this is a complete graph.
            </summary>
            <seealso cref="M:Xyaneon.ComputerScience.GraphTheory.GraphCalculations.CalculateNumberOfEdgesInCompleteDirectedGraph(System.Int32)"/>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.Vertices">
            <summary>
            Gets the read-only collection of vertices in this graph.
            </summary>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.AddEdge(`1)">
            <summary>
            Adds the provided <paramref name="edge"/> to this graph.
            </summary>
            <param name="edge">
            The edge to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edge"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="edge"/> is already in this graph.
            -or-
            <paramref name="edge"/> has a vertex which is not in this
            graph.
            -or-
            An edge is already in
            this graph which has the same vertices as
            <paramref name="edge"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This graph is already complete, as indicated by the value of the
            <see cref="P:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.IsCompleteGraph"/> property.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.AddVertex(`0)">
            <summary>
            Adds the provided <paramref name="vertex"/> to this graph.
            </summary>
            <param name="vertex">
            The vertex to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertex"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertex"/> is already in this graph.
            -or-
            A vertex is already in this graph which has
            the same <see cref="P:Xyaneon.ComputerScience.GraphTheory.Vertex.Label"/> property value as
            <paramref name="vertex"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.ContainsVertex(System.String)">
            <summary>
            Determines whether this graph contains a <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> with
            the given <paramref name="label"/>.
            </summary>
            <param name="label">
            The label of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> to check for.
            </param>
            <returns>
            <see langword="true"/> if this graph contains a
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> with the given <paramref name="label"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.GetAdjacentVertices(`0)">
            <summary>
            Gets a collection of all vertices in this graph which are adjacent
            to (i.e., share an edge with) the given <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </summary>
            <param name="vertex">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> to find the neighbors of.
            </param>
            <returns>
            A read-only collection of all vertices in this graph which are
            adjacent to (i.e., share an edge with) the given
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertex"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertex"/> is not in this graph's collection of
            vertices.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.GetAdjacentVertices(System.String)">
            <summary>
            Gets a collection of all vertices in this graph which are adjacent
            to (i.e., share an edge with) the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> with the
            given <paramref name="label"/>.
            </summary>
            <param name="label">
            The label of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> to find the neighbors of.
            </param>
            <returns>
            A read-only collection of all vertices in this graph which are
            adjacent to (i.e., share an edge with) the requested
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="label"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            A <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> with a <see cref="P:Xyaneon.ComputerScience.GraphTheory.Vertex.Label"/>
            property value equal to <paramref name="label"/> is not in this
            graph's collection of vertices.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.GetEdge(`0,`0)">
            <summary>
            Gets the edge stored in this graph with the given vertices.
            </summary>
            <param name="source">
            The source <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> of the requested edge.
            </param>
            <param name="destination">
            The destination <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> of the requested edge.
            </param>
            <returns>
            The edge stored in this graph with
            the requested vertices, if it exists; otherwise,
            <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            -or-
            <paramref name="destination"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.GetEdge(System.String,System.String)">
            <summary>
            Gets the edge stored in this graph with the given vertex labels.
            </summary>
            <param name="sourceLabel">
            The source vertex label of the requested edge.
            </param>
            <param name="destinationLabel">
            The destination vertex label of the requested edge.
            </param>
            <returns>
            The edge stored in this graph with
            the requested vertex labels, if it exists; otherwise,
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2.GetVertex(System.String)">
            <summary>
            Gets the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> stored in this graph with the given
            <paramref name="label"/>.
            </summary>
            <param name="label">
            The label of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> to retrieve.
            </param>
            <returns>
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> with the given <paramref name="label"/>
            if it exists in this graph; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1">
            <summary>
            Represents a weighted edge in a directed graph.
            </summary>
            <seealso cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedEdge`1"/>
            <seealso cref="!:UndirectedWeightedEdge"/>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1.#ctor(`0,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/> class
            using the provided vertices and weight.
            </summary>
            <param name="source">
            The source vertex.
            </param>
            <param name="destination">
            The destination vertex.
            </param>
            <param name="weight">
            The edge's weight.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            -or-
            <paramref name="destination"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1.Equals(Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge{`0})">
            <summary>
            Indicates whether the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/>
            is equal to another <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/>.
            </summary>
            <param name="other">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/> to compare with this
            object.
            </param>
            <returns>
            <see langword="true"/> if the other
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/> is equal to this
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/>; otherwise,
            <see langword="false"/>.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1.Weight">
            <summary>
            Gets or sets the weight of this edge.
            </summary>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to
            this <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/>.
            </summary>
            <param name="obj">
            The object to compare to the current
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified object is equal to
            this <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1.GetHashCode">
            <summary>
            Gets a hash code for this <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1.op_Equality(Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge{`0},Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge{`0})">
            <summary>
            Determines whether two <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/>
            instances are equal to each other.
            </summary>
            <param name="edge1">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/> on the left hand of the
            expression.
            </param>
            <param name="edge2">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/> on the right hand of the
            expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="edge1"/> is equal to
            <paramref name="edge2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1.op_Inequality(Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge{`0},Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge{`0})">
            <summary>
            Determines whether two <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/>
            instances are not equal to each other.
            </summary>
            <param name="edge1">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/> on the left hand of the
            expression.
            </param>
            <param name="edge2">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedWeightedEdge`1"/> on the right hand of the
            expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="edge1"/> is not equal to
            <paramref name="edge2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xyaneon.ComputerScience.GraphTheory.GraphCalculations">
            <summary>
            Provides functionality for performing some common calculations
            relating to graphs.
            </summary>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.GraphCalculations.CalculateNumberOfEdgesInCompleteDirectedGraph(System.Int32)">
            <summary>
            Calculates the number of edges which would be present in a complete
            directed graph containing the provided number of vertices.
            </summary>
            <param name="numberOfVertices">
            The number of vertices in the complete graph.
            </param>
            <returns>
            The number of edges which would be present in a complete
            directed graph containing the provided number of vertices.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfVertices"/> is less than zero.
            </exception>
            <seealso cref="M:Xyaneon.ComputerScience.GraphTheory.GraphCalculations.CalculateNumberOfEdgesInCompleteUndirectedGraph(System.Int32)"/>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.GraphCalculations.CalculateNumberOfEdgesInCompleteUndirectedGraph(System.Int32)">
            <summary>
            Calculates the number of edges which would be present in a complete
            undirected graph containing the provided number of vertices.
            </summary>
            <param name="numberOfVertices">
            The number of vertices in the complete graph.
            </param>
            <returns>
            The number of edges which would be present in a complete
            undirected graph containing the provided number of vertices.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfVertices"/> is less than zero.
            </exception>
            <seealso cref="M:Xyaneon.ComputerScience.GraphTheory.GraphCalculations.CalculateNumberOfEdgesInCompleteDirectedGraph(System.Int32)"/>
        </member>
        <member name="T:Xyaneon.ComputerScience.GraphTheory.IWeighted">
            <summary>
            Exposes properties on classes which have an associated weight.
            </summary>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.IWeighted.Weight">
            <summary>
            Gets or sets the weight of this edge.
            </summary>
        </member>
        <member name="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1">
            <summary>
            Represents an edge in an undirected graph.
            </summary>
            <seealso cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/> class
            using the provided vertices and weight.
            </summary>
            <param name="vertex1">
            The first vertex.
            </param>
            <param name="vertex2">
            The second vertex.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertex1"/> is <see langword="null"/>.
            -or-
            <paramref name="vertex2"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1.Equals(Xyaneon.ComputerScience.GraphTheory.UndirectedEdge{`0})">
            <summary>
            Indicates whether the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>
            is equal to another <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>.
            </summary>
            <param name="other">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/> to compare with this
            object.
            </param>
            <returns>
            <see langword="true"/> if the other
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/> is equal to this
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>; otherwise,
            <see langword="false"/>.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1.Vertex1">
            <summary>
            Gets or sets the first vertex of this edge.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The supplied value is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1.Vertex2">
            <summary>
            Gets or sets the second vertex of this edge.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The supplied value is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to
            this <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>.
            </summary>
            <param name="obj">
            The object to compare to the current
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified object is equal to
            this <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1.GetHashCode">
            <summary>
            Gets a hash code for this <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1.op_Equality(Xyaneon.ComputerScience.GraphTheory.UndirectedEdge{`0},Xyaneon.ComputerScience.GraphTheory.UndirectedEdge{`0})">
            <summary>
            Determines whether two <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>
            instances are equal to each other.
            </summary>
            <param name="edge1">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/> on the left hand of the
            expression.
            </param>
            <param name="edge2">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/> on the right hand of the
            expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="edge1"/> is equal to
            <paramref name="edge2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1.op_Inequality(Xyaneon.ComputerScience.GraphTheory.UndirectedEdge{`0},Xyaneon.ComputerScience.GraphTheory.UndirectedEdge{`0})">
            <summary>
            Determines whether two <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>
            instances are not equal to each other.
            </summary>
            <param name="edge1">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/> on the left hand of the
            expression.
            </param>
            <param name="edge2">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/> on the right hand of the
            expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="edge1"/> is not equal to
            <paramref name="edge2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2">
            <summary>
            Represents an undirected graph.
            </summary>
            <typeparam name="TVertex">
            The type of vertices used in this graph. Must be either
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> or a derived class.
            </typeparam>
            <typeparam name="TEdge">
            The type of edges used in this graph. Must be either
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/> or a derived class.
            </typeparam>
            <seealso cref="T:Xyaneon.ComputerScience.GraphTheory.DirectedGraph`2"/>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2"/> class
            using the provided collections of edges and vertices.
            </summary>
            <param name="edges">
            The collection of edges in the graph.
            </param>
            <param name="vertices">
            The collection of vertices in the graph.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/>.
            -or-
            <paramref name="vertices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="edges"/> contains an edge
            which has a <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> which is not in <paramref name="vertices"/>.
            </exception>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.Edges">
            <summary>
            Gets the read-only collection of edges in this graph.
            </summary>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.IsCompleteGraph">
            <summary>
            Gets a value indicating whether this is a complete graph.
            </summary>
            <seealso cref="M:Xyaneon.ComputerScience.GraphTheory.GraphCalculations.CalculateNumberOfEdgesInCompleteUndirectedGraph(System.Int32)"/>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.Vertices">
            <summary>
            Gets the read-only collection of vertices in this graph.
            </summary>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.AddEdge(`1)">
            <summary>
            Adds the provided <paramref name="edge"/> to this graph.
            </summary>
            <param name="edge">
            The edge to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edge"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="edge"/> is already in this graph.
            -or-
            <paramref name="edge"/> has a vertex which is not in this
            graph.
            -or-
            An edge is already in
            this graph which has the same vertices as
            <paramref name="edge"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This graph is already complete, as indicated by the value of the
            <see cref="P:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.IsCompleteGraph"/> property.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.AddVertex(`0)">
            <summary>
            Adds the provided <paramref name="vertex"/> to this graph.
            </summary>
            <param name="vertex">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertex"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertex"/> is already in this graph.
            -or-
            A <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> is already in this graph which has
            the same <see cref="P:Xyaneon.ComputerScience.GraphTheory.Vertex.Label"/> property value as
            <paramref name="vertex"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.ContainsVertex(System.String)">
            <summary>
            Determines whether this graph contains a <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> with
            the given <paramref name="label"/>.
            </summary>
            <param name="label">
            The label of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> to check for.
            </param>
            <returns>
            <see langword="true"/> if this graph contains a
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> with the given <paramref name="label"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.GetAdjacentVertices(`0)">
            <summary>
            Gets a collection of all vertices in this graph which are adjacent
            to (i.e., share an edge with) the given <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </summary>
            <param name="vertex">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> to find the neighbors of.
            </param>
            <returns>
            A read-only collection of all vertices in this graph which are
            adjacent to (i.e., share an edge with) the given
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertex"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="vertex"/> is not in this graph's collection of
            vertices.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.GetAdjacentVertices(System.String)">
            <summary>
            Gets a collection of all vertices in this graph which are adjacent
            to (i.e., share an edge with) the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> with the
            given <paramref name="label"/>.
            </summary>
            <param name="label">
            The label of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> to find the neighbors of.
            </param>
            <returns>
            A read-only collection of all vertices in this graph which are
            adjacent to (i.e., share an edge with) the requested
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="label"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            A <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> with a <see cref="P:Xyaneon.ComputerScience.GraphTheory.Vertex.Label"/>
            property value equal to <paramref name="label"/> is not in this
            graph's collection of vertices.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.GetEdge(`0,`0)">
            <summary>
            Gets the edge stored in this graph with the given vertices.
            </summary>
            <param name="vertex1">
            The first <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> of the requested edge.
            </param>
            <param name="vertex2">
            The second <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> of the requested edge.
            </param>
            <returns>
            The edge stored in this graph with
            the requested vertices, if it exists; otherwise,
            <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertex1"/> is <see langword="null"/>.
            -or-
            <paramref name="vertex2"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.GetEdge(System.String,System.String)">
            <summary>
            Gets the edge stored in this graph with the given vertex labels.
            </summary>
            <param name="vertexLabel1">
            The first vertex label of the requested edge.
            </param>
            <param name="vertexLabel2">
            The second vertex label of the requested edge.
            </param>
            <returns>
            The edge stored in this graph with
            the requested vertex labels, if it exists; otherwise,
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedGraph`2.GetVertex(System.String)">
            <summary>
            Gets the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> stored in this graph with the given
            <paramref name="label"/>.
            </summary>
            <param name="label">
            The label of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> to retrieve.
            </param>
            <returns>
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> with the given <paramref name="label"/>
            if it exists in this graph; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1">
            <summary>
            Represents a weighted edge in an undirected graph.
            </summary>
            <seealso cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedEdge`1"/>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1.#ctor(`0,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/> class
            using the provided vertices and weight.
            </summary>
            <param name="vertex1">
            The first vertex.
            </param>
            <param name="vertex2">
            The second vertex.
            </param>
            <param name="weight">
            The edge's weight.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertex1"/> is <see langword="null"/>.
            -or-
            <paramref name="vertex2"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1.Equals(Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge{`0})">
            <summary>
            Indicates whether the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/>
            is equal to another <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/>.
            </summary>
            <param name="other">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/> to compare with this
            object.
            </param>
            <returns>
            <see langword="true"/> if the other
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/> is equal to this
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/>; otherwise,
            <see langword="false"/>.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1.Weight">
            <summary>
            Gets or sets the weight of this edge.
            </summary>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to
            this <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/>.
            </summary>
            <param name="obj">
            The object to compare to the current
            <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified object is equal to
            this <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1.GetHashCode">
            <summary>
            Gets a hash code for this <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1.op_Equality(Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge{`0},Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge{`0})">
            <summary>
            Determines whether two <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/>
            instances are equal to each other.
            </summary>
            <param name="edge1">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/> on the left hand of the
            expression.
            </param>
            <param name="edge2">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/> on the right hand of the
            expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="edge1"/> is equal to
            <paramref name="edge2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1.op_Inequality(Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge{`0},Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge{`0})">
            <summary>
            Determines whether two <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/>
            instances are not equal to each other.
            </summary>
            <param name="edge1">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/> on the left hand of the
            expression.
            </param>
            <param name="edge2">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.UndirectedWeightedEdge`1"/> on the right hand of the
            expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="edge1"/> is not equal to
            <paramref name="edge2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xyaneon.ComputerScience.GraphTheory.Vertex">
            <summary>
            Represents a vertex in a graph.
            </summary>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.Vertex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> class.
            </summary>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.Vertex.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> class
            with the given label.
            </summary>
            <param name="label">
            The label to use for this vertex.
            </param>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.Vertex.Equals(Xyaneon.ComputerScience.GraphTheory.Vertex)">
            <summary>
            Indicates whether the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> is equal
            to another <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </summary>
            <param name="other">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> to compare with this object.
            </param>
            <returns>
            <see langword="true"/> if the other <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> is equal
            to this <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>; otherwise, <see langword="false"/>.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="P:Xyaneon.ComputerScience.GraphTheory.Vertex.Label">
            <summary>
            Gets or sets the label for this vertex.
            </summary>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.Vertex.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to
            this <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </summary>
            <param name="obj">
            The object to compare to the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified object is equal to
            this <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.Vertex.GetHashCode">
            <summary>
            Gets a hash code for this <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.Vertex.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representation of this object.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.Vertex.op_Equality(Xyaneon.ComputerScience.GraphTheory.Vertex,Xyaneon.ComputerScience.GraphTheory.Vertex)">
            <summary>
            Determines whether two <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> instances are equal
            to each other.
            </summary>
            <param name="vertex1">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> on the left hand of the expression.
            </param>
            <param name="vertex2">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> on the right hand of the expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="vertex1"/> is equal to
            <paramref name="vertex2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xyaneon.ComputerScience.GraphTheory.Vertex.op_Inequality(Xyaneon.ComputerScience.GraphTheory.Vertex,Xyaneon.ComputerScience.GraphTheory.Vertex)">
            <summary>
            Determines whether two <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> instances are not equal
            to each other.
            </summary>
            <param name="vertex1">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> on the left hand of the expression.
            </param>
            <param name="vertex2">
            The <see cref="T:Xyaneon.ComputerScience.GraphTheory.Vertex"/> on the right hand of the expression.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="vertex1"/> is not equal to
            <paramref name="vertex2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
    </members>
</doc>
